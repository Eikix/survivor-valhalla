name: Deploy to Mainnet

on:
  push:
    branches:
      - main
    paths:
      - "contract/**"
      - ".github/workflows/deploy-mainnet.yml"
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.version-check.outputs.changed }}
      version: ${{ steps.version-check.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
    
      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from dojo_mainnet.toml
          CURRENT_VERSION=$(grep "^version" contract/dojo_mainnet.toml | grep -v "cairo-version" | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a manual trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger - proceeding with deployment"
            echo "changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get previous version
          git checkout HEAD~1 contract/dojo_mainnet.toml 2>/dev/null || true
          PREVIOUS_VERSION=$(grep "^version" contract/dojo_mainnet.toml | grep -v "cairo-version" | cut -d'"' -f2) || echo ""
          git checkout HEAD contract/dojo_mainnet.toml
          
          echo "Previous version: $PREVIOUS_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: check-version
    if: needs.check-version.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Display deployment info
        run: |
          echo "ðŸš€ Deploying version: ${{ needs.check-version.outputs.version }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check and set environment
        id: env
        run: |
          if [ -z "${{ secrets.STARKNET_RPC_URL_MAINNET }}" ]; then
            echo "rpc_url=https://api.cartridge.gg/x/starknet/mainnet" >> $GITHUB_OUTPUT
          else
            echo "rpc_url=${{ secrets.STARKNET_RPC_URL_MAINNET }}" >> $GITHUB_OUTPUT
          fi

          if [ -z "${{ vars.DOJO_ACCOUNT_ADDRESS }}" ]; then
            echo "Error: DOJO_ACCOUNT_ADDRESS is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DOJO_PRIVATE_KEY }}" ]; then
            echo "Error: DOJO_PRIVATE_KEY is not set"
            exit 1
          fi

          echo "All required configuration is set"

      - name: Build + Deploy + Slot + Walnut (single container)
        working-directory: ./contract
        env:
          STARKNET_RPC_URL: ${{ steps.env.outputs.rpc_url }}
          DOJO_ACCOUNT_ADDRESS: ${{ vars.DOJO_ACCOUNT_ADDRESS }}
          DOJO_PRIVATE_KEY: ${{ secrets.DOJO_PRIVATE_KEY }}
          SLOT_AUTH: ${{ secrets.SLOT_AUTH_TOKEN }}
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v "${{ github.workspace }}/contract:/app" \
            -w /app \
            -e STARKNET_RPC_URL="$STARKNET_RPC_URL" \
            -e DOJO_ACCOUNT_ADDRESS="$DOJO_ACCOUNT_ADDRESS" \
            -e DOJO_PRIVATE_KEY="$DOJO_PRIVATE_KEY" \
            -e SLOT_AUTH="$SLOT_AUTH" \
            ghcr.io/dojoengine/dojo:v1.7.1 \
            bash -lc "
              set -e

              echo '[1/6] sozo build'
              sozo -P mainnet build

              echo '[2/6] sozo migrate'
              sozo -P mainnet migrate

              echo '[3/6] install slot (in container)'
              apt-get update -y >/dev/null 2>&1
              apt-get install -y curl jq ca-certificates git >/dev/null 2>&1
              curl -L https://slot.cartridge.sh | bash
              export PATH=\"/root/.slot/bin:\$PATH\"
              /root/.slot/bin/slotup || true

              echo '[4/6] deploy torii via slot'
              slot deployments update survivor-valhalla torii \
                --version v1.7.1 \
                --config /app/torii.toml

              slot deployments describe survivor-valhalla torii > /app/deployment-info.txt

              echo '[5/6] walnut verify (best-effort)'
              sozo walnut verify || echo 'Walnut verification started - check link'

              echo '[6/6] done'
            "

      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: ./contract/deployment-info.txt
